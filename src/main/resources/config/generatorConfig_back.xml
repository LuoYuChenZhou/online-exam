<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
    注意，两个属性只能选址一个;

    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
     -->
    <properties resource="config/jdbc.properties"/>

    <!--数据库驱动jar -->
    <classPathEntry
            location="D:\maven-repository\repository\mysql\mysql-connector-java\5.1.40\mysql-connector-java-5.1.40.jar"/>

    <!--
    context:生成一组对象的环境
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        3，introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="DB2Tables" defaultModelType="flat" targetRuntime="tk.mybatis.mapper.generator.TkMyBatis3Impl">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <commentGenerator>
            <property name="suppressAllComments" value="true"/><!--去除注释  -->
            <property name="suppressDate" value="true" /> <!-- 是否生成注释代时间戳-->
        </commentGenerator>

        <!--数据库连接 -->
        <jdbcConnection driverClass="${jdbc_driverClassName}"
                        connectionURL="jdbc:mysql://localhost:3306/online-exam?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false"
                        userId="${jdbc_username}"
                        password="${jdbc_password}">
        </jdbcConnection>

        <!--
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
         -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--生成实体类 指定包名 以及生成的地址 （可以自定义地址，但是路径不存在不会自动创建  使用Maven生成在target目录下，会自动创建） -->
        <javaModelGenerator targetPackage="com.lycz.entity" targetProject="MAVEN">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数,为true则没有set方法 -->
            <property name="constructorBased" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成SQLMAP文件 -->
        <sqlMapGenerator targetPackage="com.lycz.mapper" targetProject="MAVEN">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
        targetPackage/targetProject:同javaModelGenerator
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
    -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.lycz.dao" targetProject="MAVEN">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->
        <table tableName="blank_questions" domainObjectName="blankQuestionsEntity"
               mapperName = "{0}Dao" enableInsert="false"
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false" 
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false" 
        />
        <table tableName="choose_questions"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
        <table tableName="er_ee"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
        <table tableName="essay_questions"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
        <table tableName="examinee"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
        <table tableName="examiner"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
        <table tableName="papers"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
        <table tableName="programming_questions"
               enableInsert="false" 
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByExampleQueryId="false" selectByPrimaryKeyQueryId="false"
        />
    </context>
</generatorConfiguration>