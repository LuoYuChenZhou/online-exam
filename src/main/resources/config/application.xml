<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms" xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- 扫描service层注解的bean -->
    <context:component-scan base-package="com.lycz.service"/>
    <!--扫描aop-->
    <context:component-scan base-package="com.lycz.configAndDesign.aspect"/>

    <!-- activemq相关配置，此配置方式需要添加amq对应的命名空间 -->
    <!-- 连接工厂 -->
    <amq:connectionFactory id="amqConnectionFactory" brokerURL="tcp://localhost:61616" userName="sys" password="login"/>
    <!-- 设置预取策略 -->
    <amq:prefetchPolicy id="prefetchPolicy" queuePrefetch="1" topicPrefetch="1000"/>
    <!--为了提高效率，配置一个连接池 -->
    <bean id="cachedConnectionFactory"
          class="org.springframework.jms.connection.CachingConnectionFactory"
          p:targetConnectionFactory-ref="amqConnectionFactory"
          p:sessionCacheSize="10"/>
    <!-- 配置消息终点 -->
    <amq:queue id="spittleQueue" physicalName="online.exam.queue"/>
    <amq:topic id="spittleTopic" physicalName="online.exam.topic"/>
    <bean id="messageConverter"
          class="org.springframework.jms.support.converter.SimpleMessageConverter"/>
    <!-- 配置JmsTemplate（用于简化代码） -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate"
          p:defaultDestination-ref="spittleTopic"
          p:messageConverter-ref="messageConverter">
        <constructor-arg ref="amqConnectionFactory"/>
    </bean>
    <!-- 消息监听 -->
    <!--<bean id="messageListener1" class="controller.amq.MessageListener1" />
    <bean id="messageListener2" class="controller.amq.MessageListener2" />
    <bean id="messageListener3" class="controller.amq.MessageListener3" />
    <bean id="messageListener4" class="controller.amq.MessageListener4" />
    &lt;!&ndash; listener-container 默认是queue类型的 &ndash;&gt;
    <jms:listener-container connection-factory="amqConnectionFactory">
        <jms:listener destination="spittle.alert.queue" ref="messageListener1" method="onMessage" />
        <jms:listener destination="spittle.alert.queue" ref="messageListener2" method="onMessage" />
    </jms:listener-container>
    <jms:listener-container destination-type="topic" connection-factory="amqConnectionFactory">
        <jms:listener destination="biz1.topic" ref="messageListener3" method="onMessage" />
        <jms:listener destination="biz1.topic" ref="messageListener4" method="onMessage" />
    </jms:listener-container>-->

    <!-- 引入jdbc配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config/*.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJackson2HttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc_driverClassName}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="defaultAutoCommit" value="false"/>
    </bean>

    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.lycz.dao"/>
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis配置文件位置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
        <property name="configLocation" value="classpath:config/mybatis.xml"/>
        <!--typeAliasesPackage自动取对应包中不包括包名的简单类名作为包括包名的别名-->
        <!--<property name="typeAliasesPackage" value="com.lycz.model"/>/-->
    </bean>

    <!-- 创建一个sqlSession实例，线程安全的，可以在所有DAO实例共享，原理是将sqlSession，事务与当前线程挂钩 -->
    <bean name="sqlSessionTemplate" id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven/>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--swagger2配置文件-->
    <!--<bean class="Swagger2Config" id="swagger2Config"/>-->

</beans>